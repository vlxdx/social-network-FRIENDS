{"version":3,"file":"static/js/193.c009ee16.chunk.js","mappings":"0KACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCUhL,EARmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,gBAAKC,UAAS,UAAKC,EAAAA,OAAQ,YAAIA,EAAAA,QAAW,UAC7C,SAAC,KAAO,CAACC,GAAIJ,EAAK,SAAED,EAAMM,QAElC,ECHA,EAJgB,SAACN,GACb,OAAO,gBAAKO,UAAWH,EAAAA,OAAS,SAAEJ,EAAMQ,SAC5C,E,iDCCMC,GAAcC,EAAAA,EAAAA,GAAiB,IAiBrC,GAAeC,EAAAA,EAAAA,GAAU,CAACC,KAAM,2BAAhC,EAfuB,SAACZ,GACpB,OACI,kBAAMa,SAAUb,EAAMc,aAAa,WAC/B,0BACI,SAACC,EAAA,EAAK,CAACC,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAUV,GACrBW,YAAY,qBAAqBd,KAAK,sBAEjD,0BACI,yCAIhB,ICgBA,EA5BgB,SAACN,GAEb,IAAIqB,EAAQrB,EAAMsB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAK,SAAAC,GAAC,OAAI,SAAC,EAAU,CAACpB,KAAMoB,EAAEpB,KAAiBJ,GAAIwB,EAAExB,IAAZwB,EAAExB,GAAgB,IAC3FyB,EAAmBN,EAAMO,SAASH,KAAK,SAAAI,GAAC,OAAI,SAAC,EAAO,CAACrB,QAASqB,EAAErB,SAAcqB,EAAE3B,GAAM,IACrEmB,EAAMS,eAM3B,OAAK9B,EAAM+B,QAGP,iBAAKxB,UAAWH,EAAAA,QAAU,WACtB,gBAAKG,UAAWH,EAAAA,aAAe,SACzBmB,KAEN,gBAAKhB,UAAWH,EAAAA,SAAW,UACvB,yBAAOuB,OAGX,SAAC,EAAc,CAACd,SAfJ,SAACmB,GACjBhC,EAAMiC,YAAYD,EAAOF,eAC7B,QAE0B,SAAC,KAAQ,CAACzB,GAAI,UAc5C,E,0DC9BI6B,EAA6B,SAACb,GAAK,MAAM,CACzCU,OAAQV,EAAMc,KAAKJ,OACtB,ECcD,GAAeK,E,QAAAA,KACXC,EAAAA,EAAAA,KAdkB,SAAChB,GACnB,MAAO,CACHC,YAAaD,EAAMC,YAE3B,IACyB,SAACgB,GACtB,MAAO,CACHL,YAAa,SAACH,GACVQ,GAASC,EAAAA,EAAAA,GAAmBT,GAChC,EAER,KDVgC,SAACU,GAAe,IAEtCC,EAAiB,qGAKlB,OALkB,8BACnB,WACI,OAAKC,KAAK1C,MAAM+B,QAET,SAACS,GAAS,UAAKE,KAAK1C,SAFI,SAAC,KAAQ,CAACK,GAAG,UAGhD,KAAC,EALkB,CAASsC,EAAAA,WAUhC,OAFqCN,EAAAA,EAAAA,IAAQH,EAARG,CAAoCI,EAG7E,GCDA,CAGEG,E","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__ZA2nD\",\"dialogsItems\":\"Dialogs_dialogsItems__Tax1J\",\"active\":\"Dialogs_active__bZGgD\",\"messages\":\"Dialogs_messages__kItBJ\",\"message\":\"Dialogs_message__9n3+3\"};","import s from './../Dialogs.module.css';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div classname={`${s.dialog} ${s.active}`}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem; ","import s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message; ","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       placeholder='Enter your message' name=\"newMessageBody\" />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({form: 'dialog-add-message-form'})(AddMessageForm);","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\r\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> );\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    if (!props.isAuth) return <Navigate to={\"/login\"} /> ;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{ messagesElements }</div>\r\n\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to='/login' />\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"names":["props","path","id","classname","s","to","name","className","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageBody","isAuth","values","sendMessage","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React","Dialogs"],"sourceRoot":""}